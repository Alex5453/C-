#include <iostream>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <cstring>

int main()
{
    int server_fd, new_socket;
    struct sockaddr_in address;
    const int opt = 1;
    const int addrlen = sizeof(address);
    char buffer[1024];

    // Создание файлового дескриптора сокета
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
        perror("Socket creation failed");
        return EXIT_FAILURE;
    }

    // Принудительное присоединение сокета к порту 8080
    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt)) == -1) {
        perror("Setsockopt failed");
        close(server_fd);
        return EXIT_FAILURE;
    }

    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(8080);

    // Привязка сокета к адресу и порту
    if (bind(server_fd, reinterpret_cast<struct sockaddr*>(&address), sizeof(address)) == -1) {
        perror("Bind failed");
        close(server_fd);
        return EXIT_FAILURE;
    }

    // Прослушивание входящих соединений
    if (listen(server_fd, 3) == -1) {
        perror("Listen failed");
        close(server_fd);
        return EXIT_FAILURE;
    }

    // Ожидание и принятие входящего соединения
    if ((new_socket = accept(server_fd, reinterpret_cast<struct sockaddr*>(&address), reinterpret_cast<socklen_t*>(&addrlen))) == -1) {
        perror("Accept failed");
        close(server_fd);
        return EXIT_FAILURE;
    }

    while (true) {
        // Очистка буфера
        std::memset(buffer, 0, sizeof(buffer));

        // Чтение данных из сокета
        int bytes_read = read(new_socket, buffer, sizeof(buffer));
        if (bytes_read <= 0) {
            if (bytes_read == 0) {
                std::cout << "Client disconnected" << std::endl;
            } else {
                perror("Read failed");
            }
            break;
        }

        std::cout << "Client: " << buffer << std::endl;

        // Отправка сообщения обратно клиенту
        if (send(new_socket, buffer, bytes_read, 0) == -1) {
            perror("Send failed");
            break;
        }

        // Проверка на команду закрытия соединения
        if (std::strcmp(buffer, "exit") == 0) {
            std::cout << "Exit command received. Closing connection." << std::endl;
            break;
        }
    }

    // Закрытие сокетов
    close(new_socket);
    close(server_fd);
    return 0;
}
